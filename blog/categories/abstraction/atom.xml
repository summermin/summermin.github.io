<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: abstraction | Forward Slash.]]></title>
  <link href="http://summermin.github.io/blog/categories/abstraction/atom.xml" rel="self"/>
  <link href="http://summermin.github.io/"/>
  <updated>2015-05-06T00:58:56-04:00</updated>
  <id>http://summermin.github.io/</id>
  <author>
    <name><![CDATA[Summer Min]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Conversation About Abstraction]]></title>
    <link href="http://summermin.github.io/blog/2015/04/22/a-conversation-about-abstraction/"/>
    <updated>2015-04-22T20:32:01-04:00</updated>
    <id>http://summermin.github.io/blog/2015/04/22/a-conversation-about-abstraction</id>
    <content type="html"><![CDATA[<p>Today, rather than an educational presentation, I wanted to have an open dialogue about abstraction when we write code. What is it? Why is it great? Is it ever bad?</p>

<p><img class="left" src="/images/Cornelis_Kick_01.jpg" width="350" height="500">
<img class="right" src="/images/Fick_0014-_Abstract_Flowers.jpg" width="350" height="500"></p>

<p>First of all, what exactly is abstraction? I would define it as the removal of details so that whatever thing it is we&rsquo;re abstracting moves farther and farther away from the literal representation of itself. Abstraction is wonderful for programmers because it allows us to create dynamic code that can be used and reused again without having to actually type out every line each time. The best way for me to describe it would be with some examples.</p>

<p>Let&rsquo;s take this series of methods from a lab we did in class the other day:</p>

<pre><code class="ruby">def build_artists_index
  FileUtils.mkdir_p(rendered_path + "/artists")

  template = File.read("./app/views/artists/index.html.erb")
  page = ERB.new(template).result(binding)
  File.write("#{rendered_path}/artists/index.html", page)
end

def build_genres_index
  FileUtils.mkdir_p(rendered_path + "/genres")

  template = File.read("./app/views/genres/index.html.erb")
  page = ERB.new(template).result(binding)
  File.write("#{rendered_path}/genres/index.html", page)
end

def build_songs_index
  FileUtils.mkdir_p(rendered_path + "/songs")

  template = File.read("./app/views/songs/index.html.erb")
  page = ERB.new(template).result(binding)
  File.write("#{rendered_path}/songs/index.html", page)
end
</code></pre>

<p>These are pretty much all the same method except for one part of the path so we can abstract it by creating another method which all of these methods can call, so we only have to type those four lines of code once. Like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">gen_index</span><span class="p">(</span><span class="n">dir</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">rendered_path</span> <span class="o">+</span> <span class="n">dir</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  template = File.read(&amp;ldquo;./</span><span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="c1">#{dir}/index.html.erb&amp;rdquo;)</span>
</span><span class='line'>  <span class="n">page</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{rendered_path}#{dir}/index.html&amp;rdquo;, page)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def build_artists_index</span>
</span><span class='line'><span class="sr">  gen_index(&amp;ldquo;/</span><span class="n">artists</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def build_genres_index</span>
</span><span class='line'><span class="sr">  gen_index(&amp;ldquo;/</span><span class="n">genres</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def build_songs_index</span>
</span><span class='line'><span class="sr">  gen_index(&amp;ldquo;/son</span><span class="n">gs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There are ways to abstract this further so we only have to call the method once instead of three times, but I don&rsquo;t want to confuse you too much.</p>

<p>Another example which we (at the Flatiron School!) have been working with lately is ActiveRecord. It&rsquo;s an extremely useful class which wraps up a whole bunch of methods for you (so you don&rsquo;t have to write them yourself, you can simply reap their benefits by calling them) to make extracting, creating, and persisting data to a database very easy. It writes all your sql statements for you, so you can continue working blissfully with ruby.</p>

<p>I think it&rsquo;s pretty clear how powerful abstraction can be. I helps us be more efficient, less redundant, and make beautiful code. However, something I have been pondering lately is this: is there ever a point in which we have abstracted something too much? I would say yes. Let&rsquo;s look at those flowers up top. Now draw a line on a piece of paper. I&rsquo;m telling you now that the line you just drew is an abstract flower. What do you think? That&rsquo;s stupid isn&rsquo;t it? Because it&rsquo;s unrecognizable. It looks like nothing in particular, but it&rsquo;s actually an abstract flower, you just can&rsquo;t tell.</p>

<p>Now, over-abstracting code isn&rsquo;t as simple as that, but if you wrote some super clever and abstract code, then look back at it a month later and have no clue how it&rsquo;s actually working, I might consider it a little too abstract. That being said, I also think it depends on how experienced you and the people around you are. Take someone like me, at this point in my programming education, I need most things to be on the explicit side, but five years in, I&rsquo;ll probably be writing two lines of Ruby in what takes me 50 lines to do now, but as long as I (and the people I work with) can still understand its functions, I say: abstract away.</p>
]]></content>
  </entry>
  
</feed>
